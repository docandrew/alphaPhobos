Ddoc

$(SPEC_S Memory Safety,

	$(P $(I Memory Safety) for a program is defined as it being
	impossible for the program to corrupt memory.
	Therefore, the safe subset of D consists only of programming 
	language features that are guaranteed to never result in memory
	corruption. See $(LINK2 safed.html, this article) for a rationale.
	)

	$(P Memory-safe code $(DDSUBLINK function, function-safety, cannot 
	use certain language features), such as:
		$(UL
			$(LI Casts that break the type system.)
			$(LI Modification of pointer values.)
			$(LI Taking the address of a local variable or function parameter.)
		)
	)

$(H3 Usage)

	$(P Memory safety can be enabled on a per-function basis using 
	the $(DDSUBLINK function, safe-functions, $(D @safe) attribute). 
	This can be inferred when the compiler has the function body 
	available. The $(DDSUBLINK function, trusted-functions, `@trusted` attribute) can be used when a function has a safe
	interface, but uses unsafe code internally. These functions can 
	be called from $(D @safe) code.
	)
	
	$(P Array bounds checks are necessary to enforce memory safety, so 
	these are enabled (by default) for $(D @safe) code even in $(B 
	-release) mode.
	)

$(H3 Limitations)

	$(P Memory safety does not imply that code is portable, uses only
	sound programming practices, is free of byte order dependencies,
	or other bugs. It is focussed only on eliminating memory corruption
	possibilities.
	)

)

Macros:
	TITLE=Memory-Safe-D-Spec
	WIKI=SafeDSpec
